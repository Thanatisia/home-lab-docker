#=============================================
# Proxy server configuration file
#
# :: NOTE:
#   - This is designed to be like a template
#       - in that if you would like to,
#           you can copy and modify just alittle bit
#           and start using
#=============================================

# Upstream Definitions
## This is where you define the upstream server 
## like an alias for your server URL to call by
## - for simple Load Balancing
upstream home_dashboard {
    server 192.168.1.67:8080;
}

# Web server config 
## You can repeat this for all webservers you want to link to
## - This is how a reverse proxy is able to take 1 port and redirect to multiple servers
## - allowing the same port to server multiple webservers
server {
    # Listen to ports
    ## port 80 (HTTP)
    listen 80;

    ## port 443 (HTTPS)
    listen 443 ssl http2;

    ## Set server name
    ### Format : server_name [your-server-name];
    server_name home.dashboard.com;

    # For SSL (HTTPS - port 443) Encryption
    # - Specify path for SSL configuration, key and certificate
    
    ## SSL Certificate (generate using openssl)
    ### Format : ssl_certificate /etc/ssl/certs/nginx/[certificate-file-name].crt;
    ssl_certificate /etc/ssl/certs/nginx/example1.crt;

    ## SSL Certificate Key
    ### Format : ssl_certificate_key /etc/ssl/certs/nginx/[certificate-key-name].key;
    ssl_certificate_key /etc/ssl/certs/nginx/example1.key;

    ## Include SSL configuration file
    include /etc/nginx/includes/ssl.conf;

    # Specify proxy configuration file location
    location / {
        include /etc/nginx/includes/proxy.conf;
        # Include proxy passthrough
        ## Format : proxy_pass http://[name-of-webserver-alias];
        proxy_pass http://192.168.1.67:8080;
    }

    # Turn off logging for accessing
    access_log off;

    # Turn off logging for errors
    error_log /var/log/nginx/error.log error;
}

# Default server to listen
server {
    # Listen to server port number and assign server alias

    ## port 80 (HTTP)
    listen 80 default_server;

    # set server name
    # Format : server_name _;
    server_name _;

    # set server root directory 
    ## similar to python flask's route root
    root /var/www/html;

    # Set webserver default settings

    ## Set character set
    charset UTF-8;

    # Set Error pages
    # - Format : error_page [error-code] /[html-webpage-to-display].html

    ## Error Codes
    ### 404 : Webpage/route not found
    error_page 404 /backend-not-found.html;
    location = /backend-not-found.html {
        # Set page settings for the specified webpage 

        ## Security/Firewall for the age : allow/deny roles
        ### Format :
        ###     allow {all}
        ###     deny {all} 
        allow all;
    }

    # Root page settings
    location / {
        # Return page not found
        # to block access to root page
        return 404;
    }

    # Turn off access logging
    access_log off;

    # Ignore log not found errors
    log_not_found off;

    # Startup error logging and write to the error log
    error_log /var/log/nginx/error.log error;
}
